{"version":3,"sources":["editor/editor.tsx","editor/sourceCode.ts","guide/steps.tsx","guide/progress-bar.jsx","guide/api-guide.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LocalEditor","props","monaco","init","then","catch","error","console","log","options","minimap","enabled","code","config","steps","checks","checkText","before","after","relatedAPIs","warning","computeCheckList","check","beforeCode","afterCode","language","style","vs2015","Steps","map","index","value","label","disabled","useState","checkList","done","checkedValues","changeCheckValues","className","minHeight","id","onChange","values","changeDoneChecklist","ProgressIndicatorWithError","state","currentStepIndex","stepNames","_","handleNextClick","bind","handleBackClick","this","length","nextStepIndex","changeStep","setState","isNextDisabled","previewStepIndex","currentStepName","name","hasError","onClick","variant","isBackDisabled","React","Component","ApiGuide","selected","changeSelected","stepIndex","changeStepIndex","useEffect","changeError","doneCheckList","minWidth","fullWidth","onSelect","event","activeTabName","overflow","key","bol","element","App","TextCode","changeTextCode","JSON","stringify","maxWidth","height","theme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f30e6529.chunk.js","sourcesContent":["import Editor, { monaco } from \"@monaco-editor/react\";\r\nimport React from 'react';\r\n\r\n\r\nfunction LocalEditor(props: Ieditor): React.ReactElement {\r\n    const editor = monaco\r\n        .init()\r\n        .then(monaco => monaco)\r\n        .catch(error =>\r\n            console.error(\"An error occurred during initialization of Monaco: \", error)\r\n        );\r\n\r\n    console.log(props)\r\n    return (<>\r\n        <div>\r\n            <Editor {...props} options={{ minimap: { enabled: false } }} />\r\n        </div>\r\n\r\n    </>);\r\n\r\n}\r\n\r\n\r\nexport default LocalEditor;\r\n","import { Interface } from \"readline\";\r\nimport { string } from \"prop-types\";\r\n\r\nexport const code =\r\n  `\r\nclass TodoApp extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { items: [], text: '' };\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h3>TODO</h3>\r\n          <TodoList items={this.state.items} />\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"new-todo\">\r\n              What needs to be done?\r\n            </label>\r\n            <input\r\n              id=\"new-todo\"\r\n              onChange={this.handleChange}\r\n              value={this.state.text}\r\n            />\r\n            <button>\r\n              Add #{this.state.items.length + 1}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    handleChange(e) {\r\n      this.setState({ text: e.target.value });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n      e.preventDefault();\r\n      if (!this.state.text.length) {\r\n        return;\r\n      }\r\n      const newItem = {\r\n        text: this.state.text,\r\n        id: Date.now()\r\n      };\r\n      this.setState(state => ({\r\n        items: state.items.concat(newItem),\r\n        text: ''\r\n      }));\r\n    }\r\n  }\r\n\r\n  class TodoList extends React.Component {\r\n    render() {\r\n      return (\r\n        <ul>\r\n          {this.props.items.map(item => (\r\n            <li key={item.id}>{item.text}</li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  ReactDOM.render(\r\n    <TodoApp />,\r\n    document.getElementById('todos-example')\r\n  );\r\n\r\n`\r\n  ;\r\n\r\n\r\nexport const config: Iconfig = {\r\n  steps: [\r\n    {\r\n      checks: [\r\n        {\r\n          checkText: \"Make sure that your code is producing the expected outputs.\"\r\n        },\r\n        {\r\n          checkText: \" Import useState at the top of your file.\",\r\n\r\n          code: {\r\n            before: \"import React from 'react';\",\r\n            after: \"import React, { useState } from 'react';\"\r\n          }\r\n        }\r\n      ],\r\n      relatedAPIs: [\r\n        \"Import React\"\r\n      ]\r\n    },\r\n    {\r\n      checks: [\r\n        {\r\n          checkText: \"Replace the class keywords with function.\",\r\n          code: {\r\n            before: \"class X extends React.Component{} \",\r\n            after: \"function X() \"\r\n          }\r\n        },\r\n        {\r\n          checkText: \"Replace each of your component state properties with useState. \",\r\n\r\n          code: {\r\n            before: `this.state = { property: ' ' };\\nthis.handlePropertyChange = this.handlePropertyChange .bind(this);`,\r\n            after: \"const [property, handlePropertyChange ] = useState(' ');\"\r\n          }\r\n        }\r\n      ],\r\n      warning: [\r\n        \"The argument passed to useState is the initial value for the property. \"\r\n      ],\r\n      relatedAPIs: [\r\n        \"React.Component\",\r\n        \"this.state\",\r\n        \".bind\"\r\n      ]\r\n    },\r\n    {\r\n      checks: [\r\n        {\r\n          checkText: \"Replace each of the component life cycle methods with useEffect.\",\r\n          code: {\r\n            before: `componentDidUpdate() {\r\n              localStorage.setItem('myValueInLocalStorage', this.state.value);`,\r\n            after: `React.useEffect(() => {\r\n              localStorage.setItem('myValueInLocalStorage', value);\r\n            } [value]);`\r\n          }\r\n        }\r\n      ],\r\n      warning: [\r\n        \"The second argument in useEffect is how you access the current state.\"\r\n      ],\r\n      relatedAPIs: [\r\n        \"componentDidUpdate\",\r\n      ]\r\n    }\r\n\r\n  ]\r\n\r\n};","import React, { useState } from 'react';\r\nimport { CheckboxGroup } from 'react-rainbow-components';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { vs2015 } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nconst computeCheckList = (check: Icheck): React.ReactElement => {\r\n    let beforeCode: React.ReactElement = <></>;\r\n    let afterCode: React.ReactElement = <></>;\r\n\r\n    if (check.code && check.code.before) {\r\n        beforeCode = <div>\r\n            <p>Before:</p>\r\n            <SyntaxHighlighter language=\"javascript\"   style={vs2015}>\r\n            {check.code.before} \r\n            </SyntaxHighlighter>\r\n        </div>\r\n    }\r\n    if (check.code && check.code.after) {\r\n        afterCode = <div>\r\n            <p>After:</p>\r\n            <SyntaxHighlighter language=\"javascript\"   style={vs2015}>\r\n            {check.code.after}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    }\r\n    return (<>\r\n        <b>{check.checkText}</b>\r\n        {beforeCode}\r\n        {afterCode}\r\n    </ >);\r\n}\r\n\r\n\r\nfunction Steps(props: Istep | any): React.ReactElement {\r\n    const options = props.checks.map((check: Icheck, index: number) => ({\r\n        value: `${index}`,\r\n        label: computeCheckList(check),\r\n        disabled: false\r\n    }));\r\n    const [checkList, changeCheckList] = useState(options)\r\n    const [checkedValues, changeCheckValues] = useState(props.done)\r\n    const passCheckValues = (values: any): void => {\r\n        changeCheckValues(values);\r\n        props.changeDoneChecklist(values)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"rainbow-p-vertical_large rainbow-p-left_xx-large\" style={{minHeight:\"650px\"}}>\r\n                {<CheckboxGroup\r\n                    id=\"checkbox-group-1\"\r\n                    label=\"Checkbox Group Label\"\r\n                    options={checkList}\r\n                    value={checkedValues}\r\n                    onChange={passCheckValues}\r\n                />}\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Steps;\r\n\r\n","import React from 'react';\r\nimport {\r\n    ProgressIndicator,\r\n    ProgressStep,\r\n    ButtonGroup,\r\n    ButtonIcon,\r\n    Button,\r\n\r\n} from 'react-rainbow-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faEllipsisV } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nexport class ProgressIndicatorWithError extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentStepIndex: 0,\r\n        };\r\n        this.stepNames = props.steps.map((_, index) => `step-${index}`);\r\n         console.log(props.steps)\r\n        this.handleNextClick = this.handleNextClick.bind(this);\r\n        this.handleBackClick = this.handleBackClick.bind(this);\r\n    }\r\n    handleNextClick() {\r\n        const { currentStepIndex } = this.state;\r\n        if (currentStepIndex < this.stepNames.length - 1) {\r\n            const nextStepIndex = currentStepIndex + 1;\r\n            this.props.changeStep(nextStepIndex);\r\n            return this.setState({ currentStepIndex: nextStepIndex });\r\n        }\r\n        return this.setState({ isNextDisabled: false });\r\n    }\r\n\r\n    handleBackClick() {\r\n        const { currentStepIndex } = this.state;\r\n        if (currentStepIndex > 0) {\r\n            const previewStepIndex = currentStepIndex - 1;\r\n            this.props.changeStep(previewStepIndex);\r\n            this.setState({ currentStepIndex: previewStepIndex });\r\n        }\r\n    }\r\n\r\n    isNextDisabled() {\r\n        const { currentStepIndex } = this.state;\r\n        if (currentStepIndex < this.stepNames.length - 1 && currentStepIndex >= 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isBackDisabled() {\r\n        const { currentStepIndex } = this.state;\r\n        if (currentStepIndex > 0 && currentStepIndex < this.stepNames.length) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { currentStepIndex } = this.state;\r\n\r\n        return (\r\n            <div className=\"rainbow-m-bottom_large rainbow-p-bottom_large\">\r\n\r\n                <ProgressIndicator currentStepName={this.stepNames[currentStepIndex]}>\r\n                    {this.props.steps.map((done, index) => (\r\n                        <ProgressStep name={`step-${index}`} label={`Step ${index}`} hasError={done} />\r\n                    ))}\r\n                </ProgressIndicator>\r\n                {/* <div className=\"rainbow-m-top_xx-large rainbow-align-content_center rainbow-flex_wrap\">\r\n                    <p>{`This is the ${steps[currentStepIndex]} step`}</p>\r\n                </div> */}\r\n                <div className=\"rainbow-m-top_xx-large rainbow-align-content_center rainbow-flex_wrap\">\r\n                    <Button\r\n                        label=\"Back\"\r\n                        onClick={this.handleBackClick}\r\n                        variant=\"neutral\"\r\n                        disabled={this.isBackDisabled()}\r\n                        className=\"rainbow-m-horizontal_medium\"\r\n                    />\r\n                    <Button\r\n                        label=\"Next\"\r\n                        onClick={this.handleNextClick}\r\n                        variant=\"brand\"\r\n                        disabled={this.isNextDisabled()}\r\n                        className=\"rainbow-m-horizontal_medium\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Tabset, Tab } from 'react-rainbow-components';\r\nimport Steps from \"./steps\";\r\nimport { ProgressIndicatorWithError } from \"./progress-bar\";\r\nimport { config } from '../editor/sourceCode';\r\n\r\n\r\n\r\nfunction ApiGuide() {\r\n    const [selected, changeSelected] = useState('guide');\r\n    const [stepIndex, changeStepIndex] = useState(0);\r\n    useEffect(() =>\r\n        changeDoneChecklist(config.steps[stepIndex].done || [])\r\n        , [stepIndex]);\r\n    const [error, changeError] = useState(config.steps.map(_ => false));\r\n    const initializeCheckList: string[] = [];\r\n    const [doneCheckList, changeDoneChecklist] = useState(initializeCheckList);\r\n    const handleOnSelect = (event: React.MouseEvent<HTMLElement, MouseEvent>, selected: string) => {\r\n        changeSelected(selected)\r\n    }\r\n    const changeStepIndexFunction = (index: number) => {\r\n        // check for the missing check in the list and mark it with error = true\r\n        if (doneCheckList.length === config.steps[stepIndex].checks.length) {\r\n            changeError(error.map((bol, index) => (index === stepIndex) ? false : bol))\r\n        }\r\n        else {\r\n            changeError(error.map((bol, index) => index === stepIndex ? true : bol))\r\n        }\r\n\r\n        //saving the state of the checklist\r\n        config.steps[stepIndex].done = doneCheckList.map((element: string) => element);\r\n        changeStepIndex(index);\r\n    }\r\n\r\n    return (\r\n        <div className=\"rainbow-flex rainbow-flex_column rainbow_vertical-stretch\" style={{ minWidth: \"700px\", }} >\r\n            <Tabset\r\n                fullWidth\r\n                id=\"tabset-2\"\r\n                onSelect={handleOnSelect}\r\n                activeTabName={selected}\r\n            >\r\n                <Tab\r\n                    name=\"guide\"\r\n                    label={\r\n                        <span>\r\n                            {/* <FontAwesomeIcon icon={faFolderOpen} />  */}\r\n                            <b> Guide </b>\r\n                        </span>\r\n                    }\r\n                />\r\n\r\n                <Tab\r\n                    style={{ overflow: \"hidden\" }}\r\n                    name=\"help\"\r\n                    label={\r\n                        <span>\r\n                            {/*<FontAwesomeIcon icon={faClock} />  */}\r\n                            <b>   Help  </b>\r\n                        </span>\r\n                    }\r\n                />\r\n            </Tabset>\r\n            <Steps key={stepIndex} {...config.steps[stepIndex]} changeDoneChecklist={changeDoneChecklist} />\r\n            <ProgressIndicatorWithError changeStep={changeStepIndexFunction} steps={error} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApiGuide;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Editor from \"./editor/editor\"\nimport { code, config } from './editor/sourceCode'\nimport { Tabset, Tab } from 'react-rainbow-components';\nimport ApiGuide from './guide/api-guide';\n\n\nconst App: React.FC = () => {\n    const [selected, changeSelected] = useState('Todo');\n    const [TextCode, changeTextCode] = useState(code);\n    useEffect(() => {\n        if (selected == \"config\") {\n            changeTextCode(`const config = ${JSON.stringify(config)}`);\n        }\n        else {\n            changeTextCode(code);\n        }\n    }, [selected])\n\n    const handleOnSelect = (event: React.MouseEvent<HTMLElement, MouseEvent>, selected: string) => {\n        changeSelected(selected)\n    }\n    return (\n        <>\n            <div className=\"App\">\n                <div className=\"editor\">\n                    <div className=\"rainbow-flex rainbow-flex_column rainbow_vertical-stretch\" style={{ maxWidth: \"50%\", }} >\n                        <Tabset\n                            fullWidth\n                            id=\"tabset-2\"\n                            onSelect={handleOnSelect}\n                            activeTabName={selected}\n                        >\n                            <Tab\n                                name=\"config\"\n                                label={\n                                    <span>\n                                        {/* <FontAwesomeIcon icon={faFolderOpen} />  */}\n                                        <b> config.js </b>\n                                    </span>\n                                }\n                            />\n\n                            <Tab\n                                style={{ overflow: \"hidden\" }}\n                                name=\"Todo\"\n                                label={\n                                    <span>\n                                        {/*<FontAwesomeIcon icon={faClock} />  */}\n                                        <b>   Todo.js   </b>\n                                    </span>\n                                }\n                            />\n                        </Tabset>\n                    </div>\n                    <Editor language=\"javascript\" height=\"90vh\" theme=\"dark\" value={TextCode}  />\n                </div>\n                <ApiGuide />\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}